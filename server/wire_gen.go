// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"errors"
	"fmt"
	"github.com/andrewhowdencom/x40.link/api/di"
	"github.com/andrewhowdencom/x40.link/cfg"
	di2 "github.com/andrewhowdencom/x40.link/storage/di"
	"net/http"
)

// Injectors from wire.go:

func WireServer() (*http.Server, error) {
	v, err := ResolveOptions()
	if err != nil {
		return nil, err
	}
	server, err := New(v...)
	if err != nil {
		return nil, err
	}
	return server, nil
}

// wire.go:

// ErrDependencyFailure just means there was a failure resolving a dependency
var ErrDependencyFailure = errors.New("dependency failure")

// ResolveOptions generates a server with the appropriate configuration, based on Viper and other
// required dependencies
func ResolveOptions() ([]Option, error) {
	opts := []Option{}

	if addr := cfg.ServerListenAddress.Value(); addr != "" {
		opts = append(opts, WithListenAddress(addr))
	}

	if cfg.ServerH2CEnabled.Value() {
		opts = append(opts, WithH2C())
	}

	server, err := di.WireGRPCServer()
	if err != nil && !errors.Is(err, cfg.ErrMissingOptions) {
		return nil, ErrDependencyFailure
	} else if err == nil {
		opts = append(opts, WithGRPC(cfg.ServerAPIGRPCHost.Value(), server))
	}

	storage, err := di2.WireStorage()
	if err != nil {
		return nil, fmt.Errorf("%w: %s", ErrDependencyFailure, err)
	}

	opts = append(opts, WithStorage(storage))

	return opts, nil
}
